@model IEnumerable<Donor_System.Models.DrAssignment>
@using Donor_System.Models
@{
    ApplicationDbContext db = new ApplicationDbContext();
    ViewBag.Title = "MyAppointments";
}



<style>
    /* Style for the modal overlay */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black background */
        z-index: 1000; /* Ensure it's above other elements */
    }

    /* Style for the modal content */
    .modal-content {
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        max-width: 50%; /* Adjust the maximum width as needed */
        max-height: 80%; /* Adjust the maximum height as needed */
        overflow-y: auto; /* Enable scrolling if the content overflows */
    }

    /* Style for the close button */
    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 20px;
        cursor: pointer;
    }

    /* Add additional styles for your modal content, buttons, and other elements as needed */
    /* Customize fonts, colors, margins, padding, etc. */

    /* Style for buttons within the modal */
    .modal-content button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        margin-top: 10px;
    }

    /* Style for modal headings and text */
    .modal-content h2 {
        text-align: center;
    }

    /* Style for images within the modal */
    .modal-content img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
    }
</style>

<div class="breadcrumb-bg w3l-inner-page-breadcrumb py-5" style="height:50px ; ">

    <h2 class="title pt-5">Dr Appointmetns</h2>
    <ul class="breadcrumbs-custom-path mt-3 text-center" style="height:50px">
        <li><a href="@Url.Action("Index","Home")">Home</a></li>
        <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> Dr Appointments </li>
    </ul>

</div>
<!-- banner bottom shape -->
<div class="position-relative">
    <div class="shape overflow-hidden">
        <svg viewBox="0 0 2880 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 48H1437.5H2880V0H2160C1442.5 52 720 0 720 0H0V48Z" fill="currentColor"></path>
        </svg>
    </div>
</div>
<!-- banner bottom shape -->
<!-- //w3l-inner-page-breadcrumb-->


<div class="container py-lg-5 py-md-4 py-2">

    <div class="w3ls-heading">
        <h3>@ViewBag.Title</h3>
    </div>
    <div class="row" style="padding-left:100px">
        @if (TempData.ContainsKey("ScreeningSuccess"))
        {
            <div class="alert alert-success" id="notification">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @TempData["ScreeningSuccess"]
            </div>
        }
        @if (TempData.ContainsKey("ScreeningFailure"))
        {
            <div class="alert alert-success" id="notification">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @TempData["ScreeningFailure"]
            </div>
        }

        @if (TempData.ContainsKey("AssignmentSuccess"))
        {
            <div class="alert alert-success" id="notification">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @TempData["AssignmentSuccess"]
            </div>
        }
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.DoctorName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DoctorSurname)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.drEmail)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Start)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.End)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.status)
                </th>

                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <div class="modal details-modal" data-doctor-id="@item.Id">
                    <div class="modal-content">
                        <div class="modal-header-left">
                            <span class="close">&times;</span>
                            <h2 style="text-align:center">Donor Details</h2>
                        </div>



                        <div class="modal-body">
                            <p><strong>Donor Name:</strong>  @item.DonorName</p>
                            <p><strong>Donor Surname:</strong> @item.DonorSurname</p>
                            <p><strong>Donor Email:</strong> @item.DonorEmail</p>
                            <p><strong>Donation Center:</strong> @item.Center</p>

                        </div>
                    </div>
                </div>


                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.DoctorName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DoctorSurname)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.drEmail)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Start)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.End)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.status)
                    </td>

                    <td>
                        <div style="padding-bottom:3px">
                            <button class="btn btn-outline-primary open-detailsModal-btn" data-doctor-id="@item.Id">Donor Details</button>
                        </div>
                        @{
                            string currentUser = User.Identity.Name;
                            bool IsScreened = db.Appointments.Where(x => x.Email == item.DonorEmail && x.status == "Screening").Any();
                           
                        }
                        @if (item.status!="Settled")
                        {

                            if (IsScreened == false)
                            {
                                <div>
                                    <button class="btn btn-primary" onclick="location.href='@Url.Action(actionName: "Create", controllerName: "Screening", routeValues: new { appId = item.appId,assignId=item.Id })'">Start Screening</button>
                                </div>
                            }
                            else
                            {


                                <div>
                                    <button class="btn btn-primary" onclick="location.href='@Url.Action(actionName: "Create", controllerName: "BloodDonationRecords", routeValues: new { appId = item.appId, drEmail= item.drEmail,drAppId = item.Id })'">Donation Record</button>
                                </div>
                            }
                        }

                        @*@Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
        @Html.ActionLink("Details", "Details", new { id = item.Id }) |
        @Html.ActionLink("Delete", "Delete", new { id = item.Id })*@
                    </td>
                </tr>
            }

        </table>
    </div>
</div>
<script>
    // Get all the buttons with the class "open-modal-btn"
    var buttons = document.querySelectorAll(".open-detailsModal-btn");

    // Attach click event listeners to each button
    buttons.forEach(function (button) {
        button.addEventListener("click", function () {
            var doctorId = button.getAttribute("data-doctor-id");
            var modal = document.querySelector(".details-modal[data-doctor-id='" + doctorId + "']");
            modal.style.display = "block";
        });
    });

    // Get all the close buttons with the class "close"
    var closeButtons = document.querySelectorAll(".close");

    // Attach click event listeners to each close button
    closeButtons.forEach(function (closeButton) {
        closeButton.addEventListener("click", function () {
            var modal = closeButton.closest(".modal");
            modal.style.display = "none";
        });
    });

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target.classList.contains("modal")) {
            event.target.style.display = "none";
        }
    };

</script>

